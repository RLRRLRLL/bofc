// SASS ultimate transition mixin
@function remove-nth($list, $index) {
	$result: null;

	@if type-of($index) != number {
		@warn "$index: #{quote($index)} is not a number for `remove-nth`.";
	} @else if $index == 0 {
		@warn "List index 0 must be a non-zero integer for `remove-nth`.";
	} @else if abs($index) > length($list) {
		@warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
	} @else {
		$result: ();
		$index: if($index < 0, length($list) + $index + 1, $index);

		@for $i from 1 through length($list) {
			@if $i != $index {
				$result: append($result, nth($list, $i));
			}
		}
	}

	@return $result;
}

/* usage: @include simple_transition(prop 0.5s cubic-bezier(0.16, 0.85, 0.45, 1)); */
@mixin simple_transition($value) {
	-webkit-transition: $value;
	-moz-transition: $value;
	-ms-transition: $value;
	-o-transition: $value;
	transition: $value;
}

/* usage: @include transition(prop1, prop2, ..., 0.5s cubic-bezier(0.16, 0.85, 0.45, 1)); */
@mixin transition($args...) {
	$type: nth($args, length($args));
	$props: remove-nth($args, length($args));
	$result: ();

	@for $i from 1 through length($props) {
		$prop: nth($props, $i);
		$result: append($result, $prop);
		$result: append($result, $type);
		@if $i != length($props) {
			$result: append(
				$result,
				unquote(
					$string: ','
				)
			);
		}
	}

	@include simple_transition($result);
}

// button background slide effect
@mixin bg-slide($slidinBgColor, $resultColor) {
	position: relative;
	overflow: hidden;
	outline: none;

	&:hover {
		&::before,
		&::after {
			transform: translate3d(0, -100%, 0);
		}
		&::after {
			transition-delay: 0.15s;
		}
	}

	&::before,
	&::after {
		content: '';
		position: absolute;
		left: 0;
		width: 100%;
		height: 100%;
		top: 100%;
		z-index: -1;
		transition: all 0.25s;
		transition-timing-function: cubic-bezier(0.75, 0, 0.15, 1);
	}

	&::before {
		background: $slidinBgColor;
	}

	&::after {
		background: $resultColor;
	}
}

// double underline on hover effect for links
@mixin double-underline($hoverColor, $focusColor, $lineColor) {
	position: relative;

	&::before,
	&::after {
		content: '';
		position: absolute;
		height: 1px;
		pointer-events: none;
		transform-origin: 50% 0%;
		transform: translate3d(0, 3px, 0);
		transition-property: transform, opacity;
		transition-duration: 0.3s;
		transition-timing-function: cubic-bezier(0.2, 1, 0.8, 1);
		background: $lineColor;
		opacity: 0;
	}

	&::after {
		top: calc(100% + 7px);
		width: 70%;
		left: 15%;
	}

	&::before {
		top: calc(100% + 3px);
		width: 90%;
		left: 5%;
		transition-delay: 0.1s;
	}

	&:hover {
		&::before,
		&::after {
			opacity: 1;
			transform: translate3d(0, 0, 0);
			transition-timing-function: cubic-bezier(0.2, 0, 0.3, 1);
		}
	}

	&:hover,
	&.active,
	&.active:hover {
		color: $hoverColor;
	}

	&:focus,
	&:active {
		color: $focusColor;
	}

	&.active {
		&::before,
		&::after {
			opacity: 1;
		}
	}
}
